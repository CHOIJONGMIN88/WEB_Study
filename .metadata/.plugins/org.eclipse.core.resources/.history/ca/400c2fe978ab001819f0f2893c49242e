package com.ic.bbs;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import dao.BoardDao;
import dao.CommentDao;
import myconst.MyConst;
import myconst.MyConstant;
import util.Paging;
import vo.BoardVo;
import vo.CommentVo;

@Controller
public class BoardController {

	@Autowired  //자동엮기
	BoardDao board_dao;
	
	CommentDao comment_dao;
	
	@Autowired
	HttpSession session;
	
	
	@RequestMapping("/board/list.do")
	public String list(String search,String search_text,Integer page,Model model) {
		
		
		//String search = request.getParameter("search");
		//String search_text = request.getParameter("search_text");
		//String strPage = request.getParameter("page");
		
		int    nowPage = 1; //현재 보여지는 페이지
		
		//정상적으로 page=3 들어왔으면
		//if(strPage!=null && !strPage.isEmpty())
		if(page!=null)
			nowPage = page;
	
		//결정된 page에 따라서 start,end계산
		int start = (nowPage-1) *MyConst.Board.BLOCKLIST + 1;
		int end   = start + MyConst.Board.BLOCKLIST - 1;
		
		//mybatis mapper에 전달하기 위해서 Map을 포장
		Map  map = new HashMap();
		//       key    value
		map.put("start", start);
		map.put("end"  , end);
		
		if(search!=null && !search.equals("all")) {
			
			if(search.equals("name_subject_content")) {
				map.put("name", search_text);
				map.put("subject", search_text);
				map.put("content", search_text);
			}else if(search.equals("name")) {
				map.put("name", search_text); 
			}else if(search.equals("subject")) {
				map.put("subject", search_text);
			}else if(search.equals("content")) {
				map.put("content", search_text);
			}
			
		}
		

		//게시판 목록가져오기
		//BoardDao dao = BoardDao.getInstance();
		
		List<BoardVo> list = board_dao.selectList(map);
		
		//세션에 게시물을 봤냐에 대한정보(show)삭제
		session.removeAttribute("show");
		
	
		
		//페이지 메뉴 생성
		int rowTotal = board_dao.selectRowTotal(map);//전체레코드수
					
		//paging에도 검색조건 넣어서 작성해야됨.
		//paging에도 검색조건 넣어서 작성해야됨.
				String pageMenu = Paging.getPaging("list.do",
						                            nowPage, 
						                            rowTotal, 
						                            search,
						                            search_text,
						                            MyConst.Board.BLOCKLIST, 
						                            MyConst.Board.BLOCKPAGE
						                            );	
		
		//결과적으로 request binding
		model.addAttribute("list", list);		
		model.addAttribute("pageMenu", pageMenu);
				
		
		return  MyConstant.BoardController.VIEW_PATH +  "board_list.jsp";
	}
	
	@RequestMapping("/board/insert_form.do")
	public String insert_form() {
		return MyConstant.BoardController.VIEW_PATH + "board_write.jsp";
	}

	
	@RequestMapping("/board/insert.do")
	//public String insert(BoardVo vo,HttpServletRequest request){
	public String insert(BoardVo vo,HttpServletRequest request) {
		//vo에 자동으로 포장되어서 넘어온다. request 객체도 파라미터로 가져올 수 있다.
	
		HttpSession	session = request.getSession();
	    session.getAttribute("user");
	    
	    String ip=request.getRemoteAddr();
	  	vo.setIp(ip);

		int res=board_dao.Insert(vo);
		return  "/board/list.do";
	}
	
	@RequestMapping("/board/view.do")
	public String view(Integer idx,HttpServletRequest request,Model model ) {
	
		BoardVo vo=null;

		vo=board_dao.selectOne(idx);
		
		//본게시물을 봤는지 체크
		HttpSession session = request.getSession();
		if(session.getAttribute("show")==null) {
			int res=board_dao.update_readhit(idx);
			//세션에 봤다는 정보 기록
			session.setAttribute("show",true);	
		}
		
		// 조회한 데이터 바인딩
		model.addAttribute("vo",vo);
		
		return  MyConstant.BoardController.VIEW_PATH +  "board_view.jsp";
		
	}
	
	@RequestMapping("/board/delete.do")
	public String delete(Integer idx) {
		
		int res=0;
		res=board_dao.delete(idx);	
		return "redirect:list.do";
		
		// TODO Auto-generated method stub

	}
	@RequestMapping("/board/modify_form.do")
	public String modify_form(Integer idx,Model model) {
			
			BoardVo vo = null;
			vo=board_dao.selectOne(idx);
			model.addAttribute("vo",vo);
		
		return MyConstant.BoardController.VIEW_PATH + "board_modify_form.jsp";
		// TODO Auto-generated method stub

	}
	
	@RequestMapping("/board/modify_action.do")
	public String modify_form(Integer idx,Model model,String page,String subject,String name,String content) {

		BoardVo vo = board_dao.selectOne(idx);

		//변경된 값을 넣어준뒤 데이터베이스를 통해 업데이트 시켜준다.
		vo.setSubject(subject);
		vo.setName(name);
		vo.setContent(content);
		
		 // 새로운값을 받아서 변경된 값을 데이터 베이스를 통해 업데이트 시켜준다.
		int res = board_dao.update(vo);
		
		return "redirect:list.do";
	
	}
	
	
	@RequestMapping(value="/board/comment_insert.do",produces="text/html; charset=utf-8")
	@ResponseBody
	public String comment_insert(String b_idx,String id, String name, String content,HttpServletRequest request) {

	
		String ip = request.getRemoteAddr();
		
		CommentVo vo = null;
		vo.setB_idx(Integer.parseInt(b_idx));
		vo.setContent(content);
		vo.setName(name);
		vo.setId(id);
		
		
		//int res =CommentDao.getInstance().insert(vo);
		
		
		String result="success";
		
		//if(res==0)result="fail";
									//자바는 " 를 문자로 인식하지 않으므로 앞에\를 붙여준다.
		String result_json=String.format("{\"result\":\"%s\"}",result);
		//response.setContentType("text/html; charset=utf-8;");
		//response.getWriter().println(result_json);
		
		
	
		
	
	}
	
	
	
	
}
